// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get pluginFee(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class Collect extends ethereum.Event {
  get params(): Collect__Params {
    return new Collect__Params(this);
  }
}

export class Collect__Params {
  _event: Collect;

  constructor(event: Collect) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get amount0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class CommunityFee extends ethereum.Event {
  get params(): CommunityFee__Params {
    return new CommunityFee__Params(this);
  }
}

export class CommunityFee__Params {
  _event: CommunityFee;

  constructor(event: CommunityFee) {
    this._event = event;
  }

  get communityFeeNew(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class CommunityVault extends ethereum.Event {
  get params(): CommunityVault__Params {
    return new CommunityVault__Params(this);
  }
}

export class CommunityVault__Params {
  _event: CommunityVault;

  constructor(event: CommunityVault) {
    this._event = event;
  }

  get newCommunityVault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ExcessTokens extends ethereum.Event {
  get params(): ExcessTokens__Params {
    return new ExcessTokens__Params(this);
  }
}

export class ExcessTokens__Params {
  _event: ExcessTokens;

  constructor(event: ExcessTokens) {
    this._event = event;
  }

  get amount0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Fee extends ethereum.Event {
  get params(): Fee__Params {
    return new Fee__Params(this);
  }
}

export class Fee__Params {
  _event: Fee;

  constructor(event: Fee) {
    this._event = event;
  }

  get fee(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Flash extends ethereum.Event {
  get params(): Flash__Params {
    return new Flash__Params(this);
  }
}

export class Flash__Params {
  _event: Flash;

  constructor(event: Flash) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get paid0(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paid1(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Initialize extends ethereum.Event {
  get params(): Initialize__Params {
    return new Initialize__Params(this);
  }
}

export class Initialize__Params {
  _event: Initialize;

  constructor(event: Initialize) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get topTick(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get liquidityAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount0(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Plugin extends ethereum.Event {
  get params(): Plugin__Params {
    return new Plugin__Params(this);
  }
}

export class Plugin__Params {
  _event: Plugin;

  constructor(event: Plugin) {
    this._event = event;
  }

  get newPluginAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PluginConfig extends ethereum.Event {
  get params(): PluginConfig__Params {
    return new PluginConfig__Params(this);
  }
}

export class PluginConfig__Params {
  _event: PluginConfig;

  constructor(event: PluginConfig) {
    this._event = event;
  }

  get newPluginConfig(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Skim extends ethereum.Event {
  get params(): Skim__Params {
    return new Skim__Params(this);
  }
}

export class Skim__Params {
  _event: Skim;

  constructor(event: Skim) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tick(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get overrideFee(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get pluginFee(): i32 {
    return this._event.parameters[8].value.toI32();
  }
}

export class TickSpacing extends ethereum.Event {
  get params(): TickSpacing__Params {
    return new TickSpacing__Params(this);
  }
}

export class TickSpacing__Params {
  _event: TickSpacing;

  constructor(event: TickSpacing) {
    this._event = event;
  }

  get newTickSpacing(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class PoolABI__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__getCommunityFeePendingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__getPluginFeePendingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__globalStateResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getPrice(): BigInt {
    return this.value0;
  }

  getTick(): i32 {
    return this.value1;
  }

  getLastFee(): i32 {
    return this.value2;
  }

  getPluginConfig(): i32 {
    return this.value3;
  }

  getCommunityFee(): i32 {
    return this.value4;
  }

  getUnlocked(): boolean {
    return this.value5;
  }
}

export class PoolABI__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }

  getLiquidityActual(): BigInt {
    return this.value2;
  }
}

export class PoolABI__positionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getLiquidity(): BigInt {
    return this.value0;
  }

  getInnerFeeGrowth0Token(): BigInt {
    return this.value1;
  }

  getInnerFeeGrowth1Token(): BigInt {
    return this.value2;
  }

  getFees0(): BigInt {
    return this.value3;
  }

  getFees1(): BigInt {
    return this.value4;
  }
}

export class PoolABI__safelyGetStateOfAMMResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: i32;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromI32(this.value6));
    return map;
  }

  getSqrtPrice(): BigInt {
    return this.value0;
  }

  getTick(): i32 {
    return this.value1;
  }

  getLastFee(): i32 {
    return this.value2;
  }

  getPluginConfig(): i32 {
    return this.value3;
  }

  getActiveLiquidity(): BigInt {
    return this.value4;
  }

  getNextTick(): i32 {
    return this.value5;
  }

  getPreviousTick(): i32 {
    return this.value6;
  }
}

export class PoolABI__swapResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__swapWithPaymentInAdvanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class PoolABI__ticksResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: i32;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: i32,
    value3: i32,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getLiquidityTotal(): BigInt {
    return this.value0;
  }

  getLiquidityDelta(): BigInt {
    return this.value1;
  }

  getPrevTick(): i32 {
    return this.value2;
  }

  getNextTick(): i32 {
    return this.value3;
  }

  getOuterFeeGrowth0Token(): BigInt {
    return this.value4;
  }

  getOuterFeeGrowth1Token(): BigInt {
    return this.value5;
  }
}

export class PoolABI extends ethereum.SmartContract {
  static bind(address: Address): PoolABI {
    return new PoolABI("PoolABI", address);
  }

  burn(
    bottomTick: i32,
    topTick: i32,
    amount: BigInt,
    data: Bytes
  ): PoolABI__burnResult {
    let result = super.call(
      "burn",
      "burn(int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new PoolABI__burnResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_burn(
    bottomTick: i32,
    topTick: i32,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<PoolABI__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(int24,int24,uint128,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collect(
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): PoolABI__collectResult {
    let result = super.call(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );

    return new PoolABI__collectResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_collect(
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    amount0Requested: BigInt,
    amount1Requested: BigInt
  ): ethereum.CallResult<PoolABI__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect(address,int24,int24,uint128,uint128):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(amount0Requested),
        ethereum.Value.fromUnsignedBigInt(amount1Requested)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  communityVault(): Address {
    let result = super.call("communityVault", "communityVault():(address)", []);

    return result[0].toAddress();
  }

  try_communityVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "communityVault",
      "communityVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fee(): i32 {
    let result = super.call("fee", "fee():(uint16)", []);

    return result[0].toI32();
  }

  try_fee(): ethereum.CallResult<i32> {
    let result = super.tryCall("fee", "fee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCommunityFeePending(): PoolABI__getCommunityFeePendingResult {
    let result = super.call(
      "getCommunityFeePending",
      "getCommunityFeePending():(uint128,uint128)",
      []
    );

    return new PoolABI__getCommunityFeePendingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCommunityFeePending(): ethereum.CallResult<
    PoolABI__getCommunityFeePendingResult
  > {
    let result = super.tryCall(
      "getCommunityFeePending",
      "getCommunityFeePending():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__getCommunityFeePendingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPluginFeePending(): PoolABI__getPluginFeePendingResult {
    let result = super.call(
      "getPluginFeePending",
      "getPluginFeePending():(uint128,uint128)",
      []
    );

    return new PoolABI__getPluginFeePendingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPluginFeePending(): ethereum.CallResult<
    PoolABI__getPluginFeePendingResult
  > {
    let result = super.tryCall(
      "getPluginFeePending",
      "getPluginFeePending():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__getPluginFeePendingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getReserves(): PoolABI__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves():(uint128,uint128)",
      []
    );

    return new PoolABI__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<PoolABI__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__getReservesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  globalState(): PoolABI__globalStateResult {
    let result = super.call(
      "globalState",
      "globalState():(uint160,int24,uint16,uint8,uint16,bool)",
      []
    );

    return new PoolABI__globalStateResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBoolean()
    );
  }

  try_globalState(): ethereum.CallResult<PoolABI__globalStateResult> {
    let result = super.tryCall(
      "globalState",
      "globalState():(uint160,int24,uint16,uint8,uint16,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__globalStateResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBoolean()
      )
    );
  }

  isUnlocked(): boolean {
    let result = super.call("isUnlocked", "isUnlocked():(bool)", []);

    return result[0].toBoolean();
  }

  try_isUnlocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isUnlocked", "isUnlocked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFeeTransferTimestamp(): BigInt {
    let result = super.call(
      "lastFeeTransferTimestamp",
      "lastFeeTransferTimestamp():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFeeTransferTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFeeTransferTimestamp",
      "lastFeeTransferTimestamp():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidity(): BigInt {
    let result = super.call("liquidity", "liquidity():(uint128)", []);

    return result[0].toBigInt();
  }

  try_liquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidity", "liquidity():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLiquidityPerTick(): BigInt {
    let result = super.call(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxLiquidityPerTick(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLiquidityPerTick",
      "maxLiquidityPerTick():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    leftoversRecipient: Address,
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    liquidityDesired: BigInt,
    data: Bytes
  ): PoolABI__mintResult {
    let result = super.call(
      "mint",
      "mint(address,address,int24,int24,uint128,bytes):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromAddress(leftoversRecipient),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(liquidityDesired),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new PoolABI__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_mint(
    leftoversRecipient: Address,
    recipient: Address,
    bottomTick: i32,
    topTick: i32,
    liquidityDesired: BigInt,
    data: Bytes
  ): ethereum.CallResult<PoolABI__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,address,int24,int24,uint128,bytes):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromAddress(leftoversRecipient),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromI32(bottomTick),
        ethereum.Value.fromI32(topTick),
        ethereum.Value.fromUnsignedBigInt(liquidityDesired),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  nextTickGlobal(): i32 {
    let result = super.call("nextTickGlobal", "nextTickGlobal():(int24)", []);

    return result[0].toI32();
  }

  try_nextTickGlobal(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "nextTickGlobal",
      "nextTickGlobal():(int24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  plugin(): Address {
    let result = super.call("plugin", "plugin():(address)", []);

    return result[0].toAddress();
  }

  try_plugin(): ethereum.CallResult<Address> {
    let result = super.tryCall("plugin", "plugin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(param0: Bytes): PoolABI__positionsResult {
    let result = super.call(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new PoolABI__positionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions(param0: Bytes): ethereum.CallResult<PoolABI__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(bytes32):(uint256,uint256,uint256,uint128,uint128)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__positionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  prevTickGlobal(): i32 {
    let result = super.call("prevTickGlobal", "prevTickGlobal():(int24)", []);

    return result[0].toI32();
  }

  try_prevTickGlobal(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "prevTickGlobal",
      "prevTickGlobal():(int24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  safelyGetStateOfAMM(): PoolABI__safelyGetStateOfAMMResult {
    let result = super.call(
      "safelyGetStateOfAMM",
      "safelyGetStateOfAMM():(uint160,int24,uint16,uint8,uint128,int24,int24)",
      []
    );

    return new PoolABI__safelyGetStateOfAMMResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_safelyGetStateOfAMM(): ethereum.CallResult<
    PoolABI__safelyGetStateOfAMMResult
  > {
    let result = super.tryCall(
      "safelyGetStateOfAMM",
      "safelyGetStateOfAMM():(uint160,int24,uint16,uint8,uint128,int24,int24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__safelyGetStateOfAMMResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  swap(
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): PoolABI__swapResult {
    let result = super.call(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new PoolABI__swapResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_swap(
    recipient: Address,
    zeroToOne: boolean,
    amountRequired: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): ethereum.CallResult<PoolABI__swapResult> {
    let result = super.tryCall(
      "swap",
      "swap(address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountRequired),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__swapResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  swapWithPaymentInAdvance(
    leftoversRecipient: Address,
    recipient: Address,
    zeroToOne: boolean,
    amountToSell: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): PoolABI__swapWithPaymentInAdvanceResult {
    let result = super.call(
      "swapWithPaymentInAdvance",
      "swapWithPaymentInAdvance(address,address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(leftoversRecipient),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountToSell),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new PoolABI__swapWithPaymentInAdvanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapWithPaymentInAdvance(
    leftoversRecipient: Address,
    recipient: Address,
    zeroToOne: boolean,
    amountToSell: BigInt,
    limitSqrtPrice: BigInt,
    data: Bytes
  ): ethereum.CallResult<PoolABI__swapWithPaymentInAdvanceResult> {
    let result = super.tryCall(
      "swapWithPaymentInAdvance",
      "swapWithPaymentInAdvance(address,address,bool,int256,uint160,bytes):(int256,int256)",
      [
        ethereum.Value.fromAddress(leftoversRecipient),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromBoolean(zeroToOne),
        ethereum.Value.fromSignedBigInt(amountToSell),
        ethereum.Value.fromUnsignedBigInt(limitSqrtPrice),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__swapWithPaymentInAdvanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  tickSpacing(): i32 {
    let result = super.call("tickSpacing", "tickSpacing():(int24)", []);

    return result[0].toI32();
  }

  try_tickSpacing(): ethereum.CallResult<i32> {
    let result = super.tryCall("tickSpacing", "tickSpacing():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tickTable(param0: i32): BigInt {
    let result = super.call("tickTable", "tickTable(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tickTable(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tickTable", "tickTable(int16):(uint256)", [
      ethereum.Value.fromI32(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tickTreeRoot(): BigInt {
    let result = super.call("tickTreeRoot", "tickTreeRoot():(uint32)", []);

    return result[0].toBigInt();
  }

  try_tickTreeRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tickTreeRoot", "tickTreeRoot():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tickTreeSecondLayer(param0: i32): BigInt {
    let result = super.call(
      "tickTreeSecondLayer",
      "tickTreeSecondLayer(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );

    return result[0].toBigInt();
  }

  try_tickTreeSecondLayer(param0: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tickTreeSecondLayer",
      "tickTreeSecondLayer(int16):(uint256)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticks(param0: i32): PoolABI__ticksResult {
    let result = super.call(
      "ticks",
      "ticks(int24):(uint256,int128,int24,int24,uint256,uint256)",
      [ethereum.Value.fromI32(param0)]
    );

    return new PoolABI__ticksResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_ticks(param0: i32): ethereum.CallResult<PoolABI__ticksResult> {
    let result = super.tryCall(
      "ticks",
      "ticks(int24):(uint256,int128,int24,int24,uint256,uint256)",
      [ethereum.Value.fromI32(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolABI__ticksResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalFeeGrowth0Token(): BigInt {
    let result = super.call(
      "totalFeeGrowth0Token",
      "totalFeeGrowth0Token():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeGrowth0Token(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeGrowth0Token",
      "totalFeeGrowth0Token():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFeeGrowth1Token(): BigInt {
    let result = super.call(
      "totalFeeGrowth1Token",
      "totalFeeGrowth1Token():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFeeGrowth1Token(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFeeGrowth1Token",
      "totalFeeGrowth1Token():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get bottomTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get amount0Requested(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount1Requested(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class FlashCall extends ethereum.Call {
  get inputs(): FlashCall__Inputs {
    return new FlashCall__Inputs(this);
  }

  get outputs(): FlashCall__Outputs {
    return new FlashCall__Outputs(this);
  }
}

export class FlashCall__Inputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FlashCall__Outputs {
  _call: FlashCall;

  constructor(call: FlashCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get leftoversRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get bottomTick(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get topTick(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get liquidityDesired(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityActual(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class SetCommunityFeeCall extends ethereum.Call {
  get inputs(): SetCommunityFeeCall__Inputs {
    return new SetCommunityFeeCall__Inputs(this);
  }

  get outputs(): SetCommunityFeeCall__Outputs {
    return new SetCommunityFeeCall__Outputs(this);
  }
}

export class SetCommunityFeeCall__Inputs {
  _call: SetCommunityFeeCall;

  constructor(call: SetCommunityFeeCall) {
    this._call = call;
  }

  get newCommunityFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetCommunityFeeCall__Outputs {
  _call: SetCommunityFeeCall;

  constructor(call: SetCommunityFeeCall) {
    this._call = call;
  }
}

export class SetCommunityVaultCall extends ethereum.Call {
  get inputs(): SetCommunityVaultCall__Inputs {
    return new SetCommunityVaultCall__Inputs(this);
  }

  get outputs(): SetCommunityVaultCall__Outputs {
    return new SetCommunityVaultCall__Outputs(this);
  }
}

export class SetCommunityVaultCall__Inputs {
  _call: SetCommunityVaultCall;

  constructor(call: SetCommunityVaultCall) {
    this._call = call;
  }

  get newCommunityVault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCommunityVaultCall__Outputs {
  _call: SetCommunityVaultCall;

  constructor(call: SetCommunityVaultCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetPluginCall extends ethereum.Call {
  get inputs(): SetPluginCall__Inputs {
    return new SetPluginCall__Inputs(this);
  }

  get outputs(): SetPluginCall__Outputs {
    return new SetPluginCall__Outputs(this);
  }
}

export class SetPluginCall__Inputs {
  _call: SetPluginCall;

  constructor(call: SetPluginCall) {
    this._call = call;
  }

  get newPluginAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPluginCall__Outputs {
  _call: SetPluginCall;

  constructor(call: SetPluginCall) {
    this._call = call;
  }
}

export class SetPluginConfigCall extends ethereum.Call {
  get inputs(): SetPluginConfigCall__Inputs {
    return new SetPluginConfigCall__Inputs(this);
  }

  get outputs(): SetPluginConfigCall__Outputs {
    return new SetPluginConfigCall__Outputs(this);
  }
}

export class SetPluginConfigCall__Inputs {
  _call: SetPluginConfigCall;

  constructor(call: SetPluginConfigCall) {
    this._call = call;
  }

  get newConfig(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPluginConfigCall__Outputs {
  _call: SetPluginConfigCall;

  constructor(call: SetPluginConfigCall) {
    this._call = call;
  }
}

export class SetTickSpacingCall extends ethereum.Call {
  get inputs(): SetTickSpacingCall__Inputs {
    return new SetTickSpacingCall__Inputs(this);
  }

  get outputs(): SetTickSpacingCall__Outputs {
    return new SetTickSpacingCall__Outputs(this);
  }
}

export class SetTickSpacingCall__Inputs {
  _call: SetTickSpacingCall;

  constructor(call: SetTickSpacingCall) {
    this._call = call;
  }

  get newTickSpacing(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetTickSpacingCall__Outputs {
  _call: SetTickSpacingCall;

  constructor(call: SetTickSpacingCall) {
    this._call = call;
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get zeroToOne(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get amountRequired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get limitSqrtPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapWithPaymentInAdvanceCall extends ethereum.Call {
  get inputs(): SwapWithPaymentInAdvanceCall__Inputs {
    return new SwapWithPaymentInAdvanceCall__Inputs(this);
  }

  get outputs(): SwapWithPaymentInAdvanceCall__Outputs {
    return new SwapWithPaymentInAdvanceCall__Outputs(this);
  }
}

export class SwapWithPaymentInAdvanceCall__Inputs {
  _call: SwapWithPaymentInAdvanceCall;

  constructor(call: SwapWithPaymentInAdvanceCall) {
    this._call = call;
  }

  get leftoversRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get zeroToOne(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get amountToSell(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get limitSqrtPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SwapWithPaymentInAdvanceCall__Outputs {
  _call: SwapWithPaymentInAdvanceCall;

  constructor(call: SwapWithPaymentInAdvanceCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}
